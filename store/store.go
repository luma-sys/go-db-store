package store

import (
	"context"
	"database/sql"
	"github.com/luma-sys/go-db-store/page"

	"go.mongodb.org/mongo-driver/mongo"
)

// TransactionContext abstracts both MongoDB and SQL transaction contexts
type TransactionContext interface {
	// This interface will be implemented by mongo.SessionContext and *sql.Tx
}

// Make sure mongo.SessionContext implements our interface
var _ TransactionContext = (*mongo.SessionContext)(nil)

// Make sql.Tx implement our interface
var _ TransactionContext = (**sql.Tx)(nil)

// Generic transaction decorator
type TransactionDecorator func(ctx TransactionContext) (interface{}, error)

type StoreUpsertFilter struct {
	UpsertFieldKey string
	UpsertBsonKey  string
}

type BulkWriteResult struct {
	// The number of registers inserted.
	InsertedCount int64

	// The number of registers matched by filters in update and replace operations.
	MatchedCount int64

	// The number of registers modified by update and replace operations.
	ModifiedCount int64

	// The number of registers deleted.
	DeletedCount int64

	// The number of registers upserted by update and replace operations.
	UpsertedCount int64

	// A map of operation index to the _id of each upserted document.
	UpsertedIDs map[int64]interface{}
}

// InsertOneResult is the result type returned by an InsertOne operation.
type InsertOneResult struct {
	// The _id of the inserted document. A value generated by the driver will be of type primitive.ObjectID.
	InsertedID interface{}
}

// InsertManyResult is a result type returned by an InsertMany operation.
type InsertManyResult struct {
	// The _id values of the inserted registers. Values generated by the driver will be of type primitive.ObjectID.
	InsertedIDs []interface{}
}

// UpdateResult is the result type returned from UpdateOne, UpdateMany, and ReplaceOne operations.
type UpdateResult struct {
	MatchedCount  int64       // The number of registers matched by the filter.
	ModifiedCount int64       // The number of registers modified by the operation.
	UpsertedCount int64       // The number of registers upserted by the operation.
	UpsertedID    interface{} // The _id field of the upserted document, or nil if no upsert was done.
}

// DeleteResult is the result type returned by DeleteOne and DeleteMany operations.
type DeleteResult struct {
	DeletedCount int64 `bson:"n"` // The number of registers deleted.
}

type Store[T any] interface {
	WithTransaction(ctx context.Context, fn TransactionDecorator) (interface{}, error)                 // starts a transaction and executes the transaction decorator
	Has(ctx context.Context, id interface{}) bool                                                      // returns true if an entity exists by id
	Count(ctx context.Context, q page.Queryable) (*int64, error)                                       // returns the number of entities by filtered query
	FindById(ctx context.Context, id interface{}) (*T, error)                                          // returns an entity by id
	FindAll(ctx context.Context, p page.PaginationQueryable) ([]T, error)                              // returns a paginated list of entities
	Save(ctx context.Context, e *T) (*T, error)                                                        // creates a new entity
	SaveMany(ctx context.Context, e []T) (*InsertManyResult, error)                                    // creates multiple entities
	Update(ctx context.Context, e *T) (*T, error)                                                      // Update updates an existing entity
	UpdateMany(ctx context.Context, f page.Queryable, d map[string]interface{}) (*UpdateResult, error) // UpdateMany updates multiple entities
	Upsert(ctx context.Context, e *T, f *StoreUpsertFilter) (*UpdateResult, error)                     // Upsert creates or updates an entity
	UpsertMany(ctx context.Context, e []T, f *StoreUpsertFilter) (*BulkWriteResult, error)             // creates or updates multiple entities
	Delete(ctx context.Context, id interface{}) error                                                  // deletes an entity by id
	DeleteMany(ctx context.Context, f page.Queryable) (*DeleteResult, error)                           // deletes many entities by match filter
}
